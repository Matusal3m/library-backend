
//AuthorDAO.php
<?php
namespace Library\App\Models\DAOs;

use Library\App\Models\Entities\Author;
use Library\App\Models\Mappers\AuthorMapper;
use Library\Database\Database;

class AuthorDAO
{
    public function __construct(private Database $db, private AuthorMapper $authorMapper)
    {
        $this->db           = $db;
        $this->authorMapper = $authorMapper;
    }

    public function save(Author $author): Author
    {
        $name = $author->getName();

        $query = 'INSERT INTO authors (name) VALUES (:name)';

        $binds = ['name' => $name];

        $this->db->prepareAndExec($query, $binds);
        $author->setId($this->db->lastInsertId());
        return $author;
    }

    public function getById(int $id): ?Author
    {
        $query = 'SELECT * FROM authors WHERE id = :id';
        $binds = ['id' => $id];

        $authorRow = $this->db->prepareAndExec($query, $binds);

        $author = $this->authorMapper->mapRowToAuthor($authorRow);
        return $author;
    }

    public function getAllRaw(): array
    {
        $query = 'SELECT * FROM authors';

        $authorsRows = $this->db->query($query);

        return $authorsRows;
    }

    public function getAllMapped(): array
    {
        return array_map(
            fn($row) => $this->authorMapper->mapRowToAuthor($row),
            $this->getAllRaw()
        );
    }

    public function update(Author $author): void
    {
        $id   = $author->getId();
        $name = $author->getName();

        $query = 'UPDATE authors SET name = :name WHERE id = :id';
        $binds = ['id' => $id, 'name' => $name];

        $this->db->prepareAndExec($query, $binds);
    }

    public function delete(int $id): void
    {
        $query = 'DELETE FROM authors WHERE id = :id';
        $binds = ['id' => $id];

        $this->db->prepareAndExec($query, $binds);
    }
}

//BookDAO.php
<?php
namespace Library\App\Models\DAOs;

use Library\App\Models\Entities\Book;
use Library\App\Models\Mappers\BookMapper;
use Library\Database\Database;

class BookDAO
{
    public function __construct(private Database $db, private BookMapper $bookMapper)
    {
        $this->db         = $db;
        $this->bookMapper = $bookMapper;
    }

    public function save(Book $book): Book
    {
        $title        = $book->getTitle();
        $author_id    = $book->getAuthor()->getId();
        $is_available = $book->getIsAvailable();
        $seduc_code   = $book->getSeducCode();

        $query =
            'INSERT INTO books
            (title, author_id, is_available, seduc_code)
            VALUES
            (:title, :author_id, :is_available, :seduc_code)';

        $binds = [
            'title'        => $title,
            'author_id'    => $author_id,
            'is_available' => $is_available,
            'seduc_code'   => $seduc_code,
        ];

        $this->db->prepareAndExec($query, $binds);
        $book->setId($this->db->lastInsertId());
        return $book;
    }

    public function getById(int $id): ?Book
    {
        $query = 'SELECT * FROM books WHERE id = :id';
        $binds = ['id' => $id];

        $bookRow = $this->db->prepareAndExec($query, $binds);

        $book = $this->bookMapper->mapRowToBook($bookRow);
        return $book;
    }

    public function getLoanById(int $loan_id): ?Book
    {
        $query = 'SELECT * FROM books WHERE loan_id = :loan_id';
        $binds = ['loan_id' => $loan_id];

        $bookRow = $this->db->prepareAndExec($query, $binds);

        $book = $this->bookMapper->mapRowToBook($bookRow);
        return $book;
    }

    public function getAllRaw(): array
    {
        $query = 'SELECT * FROM books';

        $booksRows = $this->db->query($query);

        return $booksRows;
    }

    public function getAllRawByAuthorId(int $authorId): ?array
    {
        $query = 'SELECT * FROM books WHERE author_id = :author_id';
        $binds = ['author_id' => $authorId];

        $booksRows = $this->db->prepareAndExec($query, $binds);

        return $booksRows;
    }

    public function getAllMappedByAuthorId(int $authorId): array
    {
        return array_map(
            fn($row) => $this->bookMapper->mapRowToBook($row),
            $this->getAllRawByAuthorId($authorId)
        );
    }

    public function getAllMapped(): array
    {
        return array_map(
            fn($row) => $this->bookMapper->mapRowToBook($row),
            $this->getAllRaw()
        );
    }

    public function update(Book $book): void
    {
        $id           = $book->getId();
        $title        = $book->getTitle();
        $author_id    = $book->getAuthorId();
        $is_available = $book->getIsAvailable();
        $seduc_code   = $book->getSeducCode();

        $query = 'UPDATE books
        SET
            title = :title,
            author_id = :author_id,
            is_available = :is_available,
            seduc_code = :seduc_code,
        WHERE id = :id';

        $binds = [
            'id'           => $id,
            'title'        => $title,
            'author_id'    => $author_id,
            'is_available' => $is_available,
            'seduc_code'   => $seduc_code,
        ];

        $this->db->prepareAndExec($query, $binds);
    }

    public function delete(int $id): void
    {
        $query = 'DELETE FROM books WHERE id = :id';
        $binds = ['id' => $id];

        $this->db->prepareAndExec($query, $binds);
    }
}

//LoanDAO.php
<?php
namespace Library\App\Models\DAOs;

use Library\App\Models\Entities\Loan;
use Library\App\Models\Mappers\LoanMapper;
use Library\Database\Database;

class LoanDAO
{
    public function __construct(private Database $db)
    {
        $this->db = $db;
    }

    public function save(Loan $loan): Loan
    {
        $student_id = $loan->getStudent()->getId();
        $book_id    = $loan->getBook()->getId();

        $query =
            'INSERT INTO loans
            (student_id, book_id)
            VALUES
            (:student_id, :book_id)';

        $binds = [
            'student_id' => $student_id,
            'book_id'    => $book_id,
        ];

        $this->db->prepareAndExec($query, $binds);
        $loan->setId($this->db->lastInsertId());
        return $loan;
    }

    public function getById(int $id): ?Loan
    {
        $query = 'SELECT * FROM loans WHERE id = :id';
        $binds = ['id' => $id];

        $loanRow = $this->db->prepareAndExec($query, $binds);

        $loan = LoanMapper::mapRowToLoan($loanRow);
        return $loan;
    }

    public function getAllRaw(): array
    {
        $query = 'SELECT * FROM loans';

        $loansRows = $this->db->query($query);

        return $loansRows;
    }

    public function getAllMapped(): array
    {
        return array_map(
            fn($row) => LoanMapper::mapRowToLoan($row),
            $this->getAllRaw()
        );
    }

    public function update(Loan $loan): void
    {
        $started_at  = $loan->getStartedAt();
        $finish_date = $loan->getFinishDate();
        $extended_at = $loan->getExtendedAt();

        $query = 'UPDATE loans SET
            started_at = :started_at
            finish_date = :finish_date
            extended_at = :extended_at
            WHERE id = :id
        ';

        $binds = [
            'started_at'  => $started_at,
            'finish_date' => $finish_date,
            'extended_at' => $extended_at,
        ];

        $this->db->prepareAndExec($query, $binds);
    }

    public function delete(int $id): void
    {
        $query = 'DELETE FROM loans WHERE id = :id';
        $binds = ['id' => $id];

        $this->db->prepareAndExec($query, $binds);
    }
}

//StudentDAO.php
<?php
namespace Library\App\Models\DAOs;

use Library\App\Models\Entities\Student;
use Library\App\Models\Mappers\StudentMapper;
use Library\Database\Database;

class StudentDAO
{
    public function __construct(private Database $db)
    {
        $this->db = $db;
    }

    public function save(Student $student): Student
    {
        $name              = $student->getName();
        $class_room        = $student->getClassRoom();
        $enrollment_number = $student->getEnrollmentNumber();

        $query =
            'INSERT INTO students
            (name, enrollment_number, class_room)
            VALUES
            (:name, :class_room, :enrollment_number)';

        $binds = [
            "name"              => $name,
            "class_room"        => $class_room,
            "enrollment_number" => $enrollment_number,
        ];

        $this->db->prepareAndExec($query, $binds);
        $student->setId($this->db->lastInsertId());
        return $student;
    }

    public function getById(int $id): ?Student
    {
        $query = 'SELECT * FROM students WHERE id = :id';
        $binds = ['id' => $id];

        $studentRow = $this->db->prepareAndExec($query, $binds);

        $student = StudentMapper::mapRowToStudent($studentRow);
        return $student;
    }

    public function getByLoanId(int $loan_id): ?Student
    {
        $query = 'SELECT * FROM students WHERE loan_id = :loan_id';
        $binds = ['loan_id' => $loan_id];

        $studentRow = $this->db->prepareAndExec($query, $binds);

        $student = StudentMapper::mapRowToStudent($studentRow);
        return $student;
    }

    public function getAllRaw(): mixed
    {
        $query = 'SELECT * FROM students';

        $booksRows = $this->db->query($query);

        return $booksRows;
    }

    public function getAllMapped(): mixed
    {
        return array_map(
            fn($row) => StudentMapper::mapRowToStudent($row),
            $this->getAllRaw()
        );
    }

    public function update(Student $student): Student
    {
        $id                = $student->getId();
        $name              = $student->getName();
        $class_room        = $student->getClassRoom();
        $enrollment_number = $student->getEnrollmentNumber();
        $loan_id           = $student->getLoan()->getId();

        $query = 'UPDATE students SET
            name = :name,
            enrollment_number = :enrollment_number,
            class_room = :class_room,
            loan_id = :loan_id
            WHERE id = :id';

        $binds = [
            "id"                => $id,
            "name"              => $name,
            "class_room"        => $class_room,
            "enrollment_number" => $enrollment_number,
            "loan_id"           => $loan_id ?? null,
        ];

        return $this->db->prepareAndExec($query, $binds);
    }

    public function delete(int $id): void
    {
        $query = 'DELETE FROM students WHERE id = :id';
        $binds = ['id' => $id];

        $this->db->prepareAndExec($query, $binds);
    }
}

//Author.php
<?php
namespace Library\App\Models\Entities;

use DomainException;
use Exception;
use LogicException;

class Author
{
    private int|null $id = null;

    private string $name;

    private array $books;

    public function __construct(string $name, array $books)
    {
        $this->name  = $name;
        $this->books = $books;
    }

    public function setId(int $id): void
    {
        if ($this->id !== null) {
            throw new LogicException("ID already exist and cannot by changed");
        }

        $this->id = $id;
    }

    public function getId(): int | null
    {
        return $this->id;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function updateName(string $newName): static
    {
        if (empty($newName)) {
            throw new Exception("Author name cannot be empty", 1);
        }

        return $this;
    }

    public function getBooks(): array
    {
        return $this->books;
    }

    public function addBook(Book $newBook): void
    {
        if ($this->bookWasAlreadyAdded($newBook)) {
            throw new DomainException("Book was already added");
        }

        $this->books[] = $newBook;
    }

    private function bookWasAlreadyAdded(Book $newBook): bool
    {
        foreach ($this->books as $book) {
            if ($book->getId() === $newBook->getId()) {
                return true;
            }
        }

        return false;
    }

}

//Book.php
<?php
namespace Library\App\Models\Entities;

use DomainException;
use LogicException;

class Book
{
    private int|null $id = null;

    private string $title;

    private int $author_id;

    private bool $isAvailable;

    protected string $SeducCode;

    public function __construct(string $title, int $author_id, bool $isAvailable, string $SeducCode)
    {
        $this->validateTitle($title);

        $this->title       = $title;
        $this->author_id   = $author_id;
        $this->isAvailable = $isAvailable;
        $this->SeducCode   = $SeducCode;
    }

    public function setId(int $id): void
    {
        if ($this->id !== null) {
            throw new LogicException("ID already exist and cannot by changed");
        }

        $this->id = $id;
    }

    public function getId(): int | null
    {
        return $this->id;
    }

    public function getTitle(): string
    {
        return $this->title;
    }

    public function updateTitle(string $newTitle): void
    {
        $this->validateTitle($newTitle);

        $this->title = $newTitle;
    }

    public function getAuthorId(): int
    {
        return $this->author_id;
    }

    public function updateAuthorId(int $author_id): void
    {
        $this->author_id = $author_id;
    }

    public function setIsAvailable(bool $available): void
    {
        $this->isAvailable = $available;
    }

    public function getIsAvailable(): bool
    {
        return $this->isAvailable;
    }

    private function validateTitle(string $title): void
    {
        if (empty($title)) {
            throw new DomainException("TItle cannot be empty");
        }
    }

    public function getSeducCode(): string
    {
        return $this->SeducCode;
    }

    public function setSeducCode(string $seducCode): void
    {
        $this->SeducCode = $seducCode;
    }
}

//Loan.php
<?php
namespace Library\App\Models\Entities;

use DateTime;
use Exception;
use LogicException;

class Loan
{
    private int|null $id;

    private Student $student;

    private Book $book;

    private DateTime $startedAt;

    private DateTime $finishDate;

    private DateTime|null $extendedAt;

    public function __construct(Student $student, Book $book)
    {
        if (! $book->getIsAvailable()) {
            throw new Exception("Book cannot be borrowed");
        }

        if ($student->getHasActiveLoan()) {
            throw new Exception("Student has already one book");
        }

        $this->book       = $book;
        $this->startedAt  = date_create('now');
        $this->finishDate = date_create('now')->add(date_interval_create_from_date_string('15 days'));
    }

    public function setId(int $id): void
    {
        if ($this->id !== null) {
            throw new LogicException("ID already exist and cannot by changed");
        }

        $this->id = $id;
    }

    public function getId(): int | null
    {
        return $this->id;
    }

    public function getStudent(): Student
    {
        return $this->student;
    }

    public function getBook(): Book
    {
        return $this->book;
    }

    public function getStartedAt(): DateTime
    {
        return $this->startedAt;
    }

    public function getFinishDate(): DateTime
    {
        return $this->finishDate;
    }

    public function getExtendedAt(): DateTime
    {
        return $this->extendedAt;
    }

    public function extendLoan(): void
    {
        $this->extendedAt = date_create('now');

        $prevFinishDate = $this->finishDate;

        $newFinishDate = date_add(
            $prevFinishDate,
            date_interval_create_from_date_string('15 days')
        );

        $this->finishDate = $newFinishDate;
    }
}

//Student.php
<?php
namespace Library\App\Models\Entities;

use Exception;
use LogicException;

class Student
{
    private int|null $id;

    private string $name;

    private int $enrollmentNumber;

    private string $classRoom;

    private bool $hasActiveLoan;

    public function __construct(
        string $name,
        int $enrollmentNumber,
        string $classRoom,
        bool $hasActiveLoan
    ) {
        $this->name             = $name;
        $this->enrollmentNumber = $enrollmentNumber;
        $this->classRoom        = $classRoom;
        $this->hasActiveLoan    = $hasActiveLoan;
    }

    public function setId(int $id): void
    {
        if ($this->id !== null) {
            throw new LogicException("ID already exist and cannot by changed.");
        }

        $this->id = $id;
    }

    public function getId(): int | null
    {
        return $this->id;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function updateName(string $name): void
    {
        if (empty($name)) {
            throw new Exception("Student name cannot be empty.");
        }

        $this->name = $name;
    }

    public function getEnrollmentNumber(): int
    {
        return $this->enrollmentNumber;
    }

    public function updateEnrollmentNumber(int $enrollmentNumber): void
    {
        $this->enrollmentNumber = $enrollmentNumber;
    }

    public function getClassRoom(): string
    {
        return $this->classRoom;
    }

    public function updateClassRoom(string $classRoom): void
    {
        if (empty($classRoom)) {
            throw new Exception("Class room cannot be empty.");
        }

        $this->classRoom = $classRoom;
    }

    public function setHasActiveLoan(bool $hasActiveLoan): void
    {
        $this->hasActiveLoan = $hasActiveLoan;
    }

    public function getHasActiveLoan(): bool
    {
        return $this->hasActiveLoan;
    }

}

//AuthorMapper.php
<?php
namespace Library\App\Models\Mappers;

use Library\App\Models\DAOs\BookDAO;
use Library\App\Models\Entities\Author;

class AuthorMapper
{
    public function __construct(private BookDAO $bookDao)
    {
        $this->bookDao = $bookDao;
    }

    public function mapRowToAuthor(array $row): Author
    {
        $books = $this->bookDao->getAllMappedByAuthorId($row['id']);

        $author = new Author($row['name'], $books);

        $author->setId($row['id']);
        return $author;
    }
}

//BookMapper.php
<?php
namespace Library\App\Models\Mappers;

use Library\App\Models\DAOs\AuthorDAO;
use Library\App\Models\Entities\Book;

class BookMapper
{
    public function __construct(
        private AuthorDAO $authorDAO,
    ) {
        $this->authorDAO = $authorDAO;
    }

    public function mapRowToBook(array $row): Book
    {

        $author = $this->authorDAO->getById($row['author_id']);

        $book = new Book(
            $row['title'],
            $author,
            $row['is_available'],
            $row['seduc_code'],
        );

        if (isset($row['id'])) {
            $book->setId($row['id']);
        }

        return $book;
    }
}

//LoanMapper.php
<?php
namespace Library\App\Models\Mappers;

use Library\App\Models\DAOs\BookDAO;
use Library\App\Models\DAOs\StudentDAO;
use Library\App\Models\Entities\Loan;

class LoanMapper
{
    public function __construct(
        private StudentDAO $studentDAO, private BookDAO $bookDAO) {
        $this->studentDAO = $studentDAO;
        $this->bookDAO    = $bookDAO;
    }

    public function mapRowToLoan(array $row): Loan
    {
        $student = $this->studentDAO->getById($row['student_id']);
        $book    = $this->bookDAO->getById($row['book_id']);

        $loan = new Loan($student, $book);

        if (isset($row['id'])) {
            $loan->setId($row['id']);
        }

        return $loan;
    }

}

//StudentMapper.php
<?php
namespace Library\App\Models\Mappers;

use Library\App\Models\Entities\Student;

class StudentMapper
{
    public function mapRowToStudent(array $row): Student
    {
        $student = new Student(
            $row['name'],
            $row['enrollment_number'],
            $row['class_room'],
            $row['has_active_loan']
        );

        if (isset($row['id'])) {
            $student->setId($row['id']);
        }

        return $student;
    }
}

//LoanService.php
<?php

class LoanService
{
    //
}
